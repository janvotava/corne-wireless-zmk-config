/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            global-quick-tap;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };
        grave_keep: grave_keep {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_KEEP";
            bindings =
                <&lt 1 ESCAPE>,
                <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_RGUI|MOD_RALT|MOD_RSFT)>;
        };
    };

    macros {
        vim_escape: vim_escape {
            compatible = "zmk,behavior-macro";
            label = "vim_escape";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp COLON>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  | BKSP |
            // | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  '   |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W    &kp F        &kp P      &kp B      &kp J            &kp L               &kp U    &kp Y  &kp SEMICOLON  &none
&none  &kp A  &kp R    &kp S        &kp T      &kp G      &kp M            &kp N               &kp E    &kp I          &kp O  &none
&none  &kp Z  &kp X    &kp C        &kp D      &kp V      &kp K            &kp H           &kp COMMA  &kp DOT       &kp FSLH  &none
                     &kp TAB  &grave_keep  &kp SPACE    &kp RET  &lt 2 BACKSPACE  &lt 3 SINGLE_QUOTE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | CTRL |  B- |  B+ |  V- |  PP |  V+ |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none                 &kp N1                 &kp N2              &kp N3               &kp N4        &kp N5               &kp N6         &kp N7  &kp N8     &kp N9       &kp N0   &none
&none  &hm LEFT_GUI C_BRI_DN  &hm LEFT_ALT C_BRI_UP  &hm LCTRL C_VOL_DN  &hm LEFT_SHIFT C_PP  &kp C_VOL_UP             &kp LEFT       &kp DOWN  &kp UP  &kp RIGHT  &vim_escape  &trans
&none                 &trans                 &trans              &trans               &trans        &trans               &trans         &trans  &trans     &trans       &trans  &trans
                                                               &kp LGUI               &trans     &kp SPACE    &kp LC(LG(SPACE))  &kp BACKSPACE  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT | OUT |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
 &none          &kp EXCL            &kp AT          &kp HASH          &kp DLLR         &kp PRCNT    &kp CARET               &kp AMPS  &kp KP_MULTIPLY            &kp LPAR            &kp RPAR   &none
&trans  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(NUMBER_5)    &kp MINUS  &hm RIGHT_SHIFT EQUAL   &hm LBKT RCTRL  &hm RIGHT_ALT RBKT  &hm RIGHT_GUI BSLH  &trans
 &none            &trans            &trans            &trans            &trans            &trans    &kp UNDER               &kp PLUS         &kp LBRC            &kp RBRC            &kp PIPE  &trans
                                                    &kp LGUI            &trans         &kp SPACE      &kp RET                 &trans           &trans
            >;
        };

        functional {
            bindings = <
&trans        &kp F1        &kp F2        &kp F3                &kp F4      &kp F5      &kp F6    &kp F7  &kp F8     &kp F9  &kp F10  &trans
&trans        &trans        &trans        &trans  &kp LG(LS(NUMBER_4))      &trans    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT   &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2          &out OUT_TOG  &bt BT_CLR      &trans    &trans  &trans     &trans   &trans  &trans
                                          &trans                &trans      &trans      &trans    &trans  &trans
            >;
        };
    };
};
